39.6/60
23.4/60
9*54*2
972*15
972*2
0.8 * 150
setwd('~/bowman_lab/antarctica_trinh')
## read in the edge_tally file and remove the lines associated with the mock community
tally <- read.csv('antarctica_trinh.bacteria.unique_tally.csv', header = T, row.names = 1)
tally <- tally[grep('Mock', row.names(tally), invert = T),]
tally <- tally[order(row.names(tally)),]
## read in edge_data and taxon_map
data <- read.csv('antarctica_trinh.bacteria.edge_data.csv', header = T, row.names = 1)
taxa <- read.csv('antarctica_trinh.bacteria.taxon_map.csv', header = T, row.names = 1, sep = ',', as.is = T)
map <- read.csv('antarctica_trinh.bacteria.seq_edge_map.csv', header = T, row.names = 1)
## convert all na's to 0, then check for low abundance samples
tally[is.na(tally)] <- 0
rowSums(tally)
## remove low abundance samples, row abundance edges
tally.select <- tally[rowSums(tally) > 5000,]
tally.select <- tally.select[,colSums(tally.select) > 10000]
## normalize
tally.select <- tally.select/rowSums(tally.select)
## make a heatmap, but first map taxa to edge number for row labeling in the heatmap
tally.lab.Row <- taxa[colnames(tally.select), 'taxon']
tally.lab.Row[tally.lab.Row == ""] <- 'Bacteria'
unique.lab.Row <- map[colnames(tally.select), 'global_edge_num']
unique.lab.Row <- taxa[unique.lab.Row, 'taxon']
unique.lab.Row[unique.lab.Row == ""] <- 'Bacteria'
unique.lab.Row[is.na(unique.lab.Row)] <- 'Bacteria'
heat.col <- colorRampPalette(c('white', 'lightgoldenrod1', 'darkgreen'))(100)
heatmap(t(data.matrix(tally.select)),
Colv = NA,
scale = NULL,
col = heat.col,
labRow = unique.lab.Row,
margins = c(5, 10))
setwd("~/bowman_lab/OAST/basque_lakes/round_2")
stain = 'AF' # indicate AF or SG
output <- 'basque.AF'                   # identifier for output files
data.path <- './'                     # make sure this ends with "/"
f.list <- list.files(path = data.path,
pattern = '*fcs',
ignore.case = T)      # list of fcs files to analyze
FSC.llimit <- -1
SSC.llimit <- -1
RED.V.HLin.llimit <- -1 # only for AF
GRN.B.HLin.llimit <- 1.4 # only for SG
SSC.beads.llimit <- 3.3
FSC.beads.llimit <- 3.8
FL5.beads.llimit <- 3.3
library(hexbin)
library('flowCore')
if(stain == 'AF'){
training.events <- data.frame(`FSC-HLin` = numeric(),
`SSC-HLin` = numeric(),
`BLU-V-HLin` = numeric(),
`YEL-B-HLin` = numeric(),
`RED-V-HLin` = numeric(),
`RED-B-HLin` = numeric()) # a dataframe to hold a selection of data for training the model
colnames(training.events) <- c("FSC-HLin", "SSC-HLin", "BLU-V-HLin", "YEL-B-HLin", "RED-V-HLin", "RED-B-HLin")
}
if(stain == 'SG'){
training.events <- data.frame(`FSC-HLin` = numeric(),
`SSC-HLin` = numeric(),
`BLU-V-HLin` = numeric(),
`GRN-B-HLin` = numeric()) # a dataframe to hold a selection of data for training the model
colnames(training.events) <- c("FSC-HLin", "SSC-HLin", "BLU-V-HLin", "GRN-B-HLin")
}
fcs = f.list[1]
i <- 0
i <- i + 1
fcm <- read.FCS(paste0(data.path, fcs), emptyValue = F, dataset = i)
f.name <- fcm@description$`GTI$SAMPLEID`
f.name <- sub('SYBR', 'SG', f.name)
grepl(stain, f.name)
fcm <- as.data.frame(fcm@exprs)
head(fcm)
fcm[fcm < 1] <- NA
fcm <- na.omit(fcm)
log10(-1)
log10(0)
log10(0.1)
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm <- function(name, fcm.dataframe, beads=NA, x='FSC-HLin', y='RED-V-HLin'){
fcm.hex <- hexbin(log10(fcm.dataframe[,x]), log10(fcm.dataframe[,y]), 100)
plot(fcm.hex@xcm,
fcm.hex@ycm,
col = BTC(100)[as.numeric(cut(fcm.hex@count, 100))],
ylab = paste0('log10(', y, ')'),
xlab = paste0('log10(', x, ')'),
main = name,
pch = 19,
cex = 0.4)
try({
rect(c(min(log10(beads[,x])), min(log10(beads[,x]))),
c(min(log10(beads[,y])), min(log10(beads[,y]))),
c(max(log10(beads[,x])), max(log10(beads[,x]))),
c(max(log10(beads[,y])), max(log10(beads[,y]))))
}, silent = T)
}
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
fcm <- as.data.frame(fcm@exprs)
fcm <- fcm[,grep('HLin', colnames(fcm))]
fcm[fcm < 1] <- NA
fcm <- na.omit(fcm)
## Identify beads.  If you don't know where the beads are start with an empty beads dataframe and
## make some plots (SSC, FL5) to identify.
fcm.beads <- data.frame()
fcm.beads <- fcm[which(log10(fcm$`SSC-HLin`) > SSC.beads.llimit &
log10(fcm$`BLU-V-HLin`) > FL5.beads.llimit &
log10(fcm$`FSC-HLin`) > FSC.beads.llimit),]
## Make plots of all events.
if(stain == 'AF'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
## Remove events that are below limits (thresholds).
fcm <- fcm[log10(fcm$`FSC-HLin`) > FSC.llimit,]
fcm <- fcm[log10(fcm$`SSC-HLin`) > SSC.llimit,]
if(stain == 'AF'){
fcm <- fcm[log10(fcm$`RED-V-HLin`) > RED.V.HLin.llimit,]
}
if(stain == 'SG'){
fcm <- fcm[log10(fcm$`GRN-B-HLin`) > GRN.B.HLin.llimit,]
}
fcm <- read.FCS(paste0(data.path, fcs), emptyValue = F, dataset = i)
f.name <- fcm@description$`GTI$SAMPLEID`
f.name <- sub('SYBR', 'SG', f.name)
## If it's the last record in the file, stop loop after this iteration.
if(as.integer(fcm@description$`$NEXTDATA`) == 0){
analyze.next <- F}
fcm <- as.data.frame(fcm@exprs)
fcm <- fcm[,grep('HLin', colnames(fcm))]
fcm[fcm < 1] <- NA
fcm <- na.omit(fcm)
## Identify beads.  If you don't know where the beads are start with an empty beads dataframe and
## make some plots (SSC, FL5) to identify.
fcm.beads <- data.frame()
fcm.beads <- fcm[which(log10(fcm$`SSC-HLin`) > SSC.beads.llimit &
log10(fcm$`BLU-V-HLin`) > FL5.beads.llimit &
log10(fcm$`FSC-HLin`) > FSC.beads.llimit),]
## Make plots of all events.
if(stain == 'AF'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
## Remove events that are below limits (thresholds).
fcm <- fcm[log10(fcm$`FSC-HLin`) > FSC.llimit,]
fcm <- fcm[log10(fcm$`SSC-HLin`) > SSC.llimit,]
if(stain == 'AF'){
fcm <- fcm[log10(fcm$`RED-V-HLin`) > RED.V.HLin.llimit,]
}
if(stain == 'SG'){
fcm <- fcm[log10(fcm$`GRN-B-HLin`) > GRN.B.HLin.llimit,]
}
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x='GRN-B-HLin', y='RED-V-HLin')
range(fcm$`GRN-B-HLin`)
range(log10(fcm$`GRN-B-HLin`))
setwd("~/bowman_lab/bowman_lab_github/flow_cytometry_scripts")
f.list <- list.files(path = data.path,
pattern = '*fcs',
ignore.case = T)      # list of fcs files to analyze
fcm <- read.FCS(paste0(data.path, fcs), emptyValue = F, dataset = i)
fcs = f.list[1]
fcm <- read.FCS(paste0(data.path, fcs), emptyValue = F, dataset = i)
f.name <- fcm@description$`GTI$SAMPLEID`
f.name <- sub('SYBR', 'SG', f.name)
fcm <- as.data.frame(fcm@exprs)
fcm <- fcm[,grep('HLin', colnames(fcm))]
fcm[fcm < 1] <- NA
fcm <- na.omit(fcm)
## Identify beads.  If you don't know where the beads are start with an empty beads dataframe and
## make some plots (SSC, FL5) to identify.
fcm.beads <- data.frame()
fcm.beads <- fcm[which(log10(fcm$`SSC-HLin`) > SSC.beads.llimit &
log10(fcm$`BLU-V-HLin`) > FL5.beads.llimit &
log10(fcm$`FSC-HLin`) > FSC.beads.llimit),]
## Make plots of all events.
if(stain == 'AF'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
## Remove events that are below limits (thresholds).
fcm <- fcm[log10(fcm$`FSC-HLin`) > FSC.llimit,]
fcm <- fcm[log10(fcm$`SSC-HLin`) > SSC.llimit,]
if(stain == 'AF'){
fcm <- fcm[log10(fcm$`RED-V-HLin`) > RED.V.HLin.llimit,]
}
if(stain == 'SG'){
fcm <- fcm[log10(fcm$`GRN-B-HLin`) > GRN.B.HLin.llimit,]
}
## Make plots of only those events remaining.
if(stain == 'AF'){
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
plot.fcm(f.name, fcm, fcm.beads, x='GRN-B-HLin', y='RED-V-HLin')
i
i <- 2
fcm <- read.FCS(paste0(data.path, fcs), emptyValue = F, dataset = i)
f.name <- fcm@description$`GTI$SAMPLEID`
fcm <- as.data.frame(fcm@exprs)
fcm <- fcm[,grep('HLin', colnames(fcm))]
fcm[fcm < 1] <- NA
fcm <- na.omit(fcm)
## Identify beads.  If you don't know where the beads are start with an empty beads dataframe and
## make some plots (SSC, FL5) to identify.
fcm.beads <- data.frame()
fcm.beads <- fcm[which(log10(fcm$`SSC-HLin`) > SSC.beads.llimit &
log10(fcm$`BLU-V-HLin`) > FL5.beads.llimit &
log10(fcm$`FSC-HLin`) > FSC.beads.llimit),]
## Make plots of all events.
if(stain == 'AF'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(f.name, fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(f.name, fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
## Remove events that are below limits (thresholds).
fcm <- fcm[log10(fcm$`FSC-HLin`) > FSC.llimit,]
fcm <- fcm[log10(fcm$`SSC-HLin`) > SSC.llimit,]
if(stain == 'AF'){
fcm <- fcm[log10(fcm$`RED-V-HLin`) > RED.V.HLin.llimit,]
}
if(stain == 'SG'){
fcm <- fcm[log10(fcm$`GRN-B-HLin`) > GRN.B.HLin.llimit,]
}
## Make plots of only those events remaining.
if(stain == 'AF'){
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='RED-V-HLin')
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x = 'YEL-B-HLin', y = 'RED-V-HLin')
}
if(stain == 'SG'){
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
}
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x = 'GRN-B-HLin', y = 'RED-V-HLin')
plot.fcm(paste(f.name, 'QC'), fcm, fcm.beads, x='FSC-HLin', y='GRN-B-HLin')
