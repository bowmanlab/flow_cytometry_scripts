install.packages("vegan")
load("C:/Users/jeff/Desktop/CFM87_16.Rdata")
cfm <- as.data.frame(CFM87_16)
cfm$year <- cfm$SEASON + 1
cfm
load("C:/Users/jeff/Documents/ducklow_lab/all_pal/17.10.23.rsession.RData")
View(year.cluster)
row.names(cfm) <- cfm$year
cfm[row.names(year.cluster),'type'] <- year.cluster$cluster
cfm
boxplot(cfm$WT ~ cfm$year)
boxplot(cfm$WT ~ factor(cfm$year))
boxplot(cfm$WT ~ factor(cfm$type))
boxplot(cfm$WT ~ factor(cfm$type), notch = T)
wilcox.test(cfm$WT[which(cfm$type == 2)], cfm$WT[which(cfm$type == 1)])
row.names(biome.abundance.sum.ra)
row.names(biome.tally.sum.ra)
cor(cfm$WT[which(row.names(cfm) %in% as.numeric(row.names(biome.tally.sum.ra)))], biome.tally.sum.ra)
plot(cfm$WT[which(row.names(cfm) %in% as.numeric(row.names(biome.tally.sum.ra)))], biome.tally.sum.ra[,'biome.7'])
cor(cfm$WT[which(row.names(cfm) %in% as.numeric(row.names(biome.tally.sum.ra))) + 1], biome.tally.sum.ra)
cor(cfm$WT[which(row.names(cfm) %in% as.numeric(row.names(biome.tally.sum.ra))) - 1], biome.tally.sum.ra)
plot(cfm$WT[which(row.names(cfm) %in% as.numeric(row.names(biome.tally.sum.ra))) - 1], biome.tally.sum.ra[,'biome.8'])
cfm[row.names(year.cluster) - 1,'type'] <- year.cluster$cluster
cfm[as.numeric(row.names(year.cluster)) - 1,'type'] <- year.cluster$cluster
boxplot(cfm$WT ~ factor(cfm$type), notch = T)
cfm[as.numeric(row.names(year.cluster)),'type'] <- year.cluster$cluster
boxplot(cfm$WT ~ factor(cfm$type), notch = T)
cfm$type <- NULL
cfm
cfm <- as.data.frame(CFM87_16)
cfm[as.numeric(row.names(year.cluster)) - 1,'type'] <- year.cluster$cluster
cfm
cfm <- as.data.frame(CFM87_16)
as.numeric(row.names(year.cluster)) - 1
year.cluster$cluster
cfm[as.numeric(row.names(year.cluster)) - 1,]
cfm <- as.data.frame(CFM87_16)
row.names(cfm) <- cfm$SEASON
cfm[as.numeric(row.names(year.cluster)) - 1,]
row.names(cfm)
cfm[as.character(as.numeric(row.names(year.cluster)) - 1),'type'] <- year.cluster$cluster
cfm
boxplot(cfm$WT ~ cfm$type)
boxplot(cfm$WT ~ cfm$type, notch = T)
cfm[as.character(as.numeric(row.names(year.cluster)) - 0),'type'] <- year.cluster$cluster
boxplot(cfm$WT ~ cfm$type, notch = T)
cfm[as.character(as.numeric(row.names(year.cluster)) + 1),'type'] <- year.cluster$cluster
boxplot(cfm$WT ~ cfm$type, notch = T)
source("https://bioconductor.org/biocLite.R")
biocLite("dada2")
biocLite("BiocUpgrade")
source("https://bioconductor.org/biocLite.R")
biocLite("dada2"
)
load("~/ducklow_lab/palmer_2015/paprica_output/18.4.26_session.RData")
which(rowSums(comparison.count) = max(rowSums(comparison.count)))
which(rowSums(comparison.count) == max(rowSums(comparison.count)))
length(which(rowSums(comparison.count) == max(rowSums(comparison.count))))
genome
176956-3790
load("~/ducklow_lab/pal_timeseries/round_5/pal_timeseries_publication.Rdata")
mode.params.df
write.csv(mode.params.df, 'mode_params_df_4hyewon.csv', quote = F)
test <- rnorm(100, 10, 1)
library(dada2)
456013-442579
13434*1.57
851622-818389
560*08
560*.8
315*.8
1243*08
699*.8
1243*0.8
1243/699
640*1.78
640/1243
0.51*699
4948-4557
0.325*5000
0.0325*5000
install.packages(c("bindrcpp", "bit", "blob", "car", "caTools", "cli", "cowplot", "data.table", "DBI", "dendextend", "digest", "doParallel", "dplyr", "evaluate", "FactoMineR", "fastcluster", "Formula", "fpc", "futile.options", "gdalUtils", "ggplot2", "ggpubr", "ggrepel", "ggsci", "glue", "gtools", "highr", "htmlTable", "htmlwidgets", "iterators", "kernlab", "kohonen", "lambda.r", "lme4", "maptools", "matrixStats", "mclust", "mime", "modeltools", "munsell", "mvtnorm", "nloptr", "oce", "pbdMPI", "pbdSLAP", "pillar", "pkgconfig", "plogr", "purrr", "quantreg", "R.oo", "R.utils", "R6", "raster", "Rcpp", "RcppArmadillo", "RcppParallel", "RCurl", "rgdal", "rlang", "robustbase", "rrcov", "RSQLite", "rstudioapi", "scales", "snow", "sp", "stringi", "stringr", "testthat", "tidyr", "tidyselect", "trimcluster", "utf8", "vegan", "viridis", "WGCNA", "withr", "XML", "xtable", "yaml", "zoo"))
source("https://bioconductor.org/biocLite.R")
biocLite()
setwd('~/bowman_lab/bowman_lab_github/flow_cytometry_scripts')
#### general parameters ####
output <- 'testing' # This variable will be used for naming your output files
plot.fcm <- function(name, fcm.dataframe, beads, x, y){
fcm.hex <- hexbin(log10(fcm.dataframe[,x]), log10(fcm.dataframe[,y]), 100)
plot(fcm.hex@xcm,
fcm.hex@ycm,
col = BTC(100)[as.numeric(cut(fcm.hex@count, 100))],
ylab = paste0('log10(', y, ')'),
xlab = paste0('log10(', x, ')'),
main = name,
pch = 19,
cex = 0.4)
rect(c(min(log10(beads[,x])), min(log10(beads[,x]))),
c(min(log10(beads[,y])), min(log10(beads[,y]))),
c(max(log10(beads[,x])), max(log10(beads[,x]))),
c(max(log10(beads[,y])), max(log10(beads[,y]))))
#  return(fcm.hex)
}
#### QC parameters ####
f.list <- list.files(path = './', pattern = '*AF.fcs', ignore.case = T)
FSC.limit <- 5
SSC.limit <- 1
FL6.limit <- 1
#### aggregation and QC ####
## The training.events dataframe holds a random sample
## of each fcs file for training the neural network
training.events <- data.frame(FSC = numeric(),
SSC = numeric(),
FL2 = numeric(),
FL3 = numeric(),
FL4 = numeric(),
FL6 = numeric())
library('flowCore')
library('hexbin')
sample.size <- 1000 # size to sample from each for training data
f.name <- f.list[1]
print(f.name)
fcm <- read.FCS(f.name)
head(fcm)
packageVersion("flowCore")
